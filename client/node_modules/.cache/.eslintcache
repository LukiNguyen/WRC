[{"D:\\Video-Chat\\client\\src\\index.js":"1","D:\\Video-Chat\\client\\src\\reportWebVitals.js":"2","D:\\Video-Chat\\client\\src\\App.js":"3","D:\\Video-Chat\\client\\src\\serviceWorker.js":"4","D:\\Video-Chat\\client\\src\\Home.js":"5","D:\\Video-Chat\\client\\src\\components\\Video\\Video.js":"6","D:\\Video-Chat\\client\\src\\components\\options\\Options.js":"7","D:\\Video-Chat\\client\\src\\context\\VideoState.js":"8","D:\\Video-Chat\\client\\src\\context\\VideoContext.js":"9"},{"size":595,"mtime":1653132549187,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1653132549187,"results":"12","hashOfConfig":"11"},{"size":429,"mtime":1653150247408,"results":"13","hashOfConfig":"11"},{"size":4650,"mtime":1653132549187,"results":"14","hashOfConfig":"11"},{"size":1014,"mtime":1653152695084,"results":"15","hashOfConfig":"11"},{"size":7434,"mtime":1653152824267,"results":"16","hashOfConfig":"11"},{"size":4651,"mtime":1653152509305,"results":"17","hashOfConfig":"11"},{"size":8047,"mtime":1653132549186,"results":"18","hashOfConfig":"11"},{"size":109,"mtime":1653152115790,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tjikyj",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Video-Chat\\client\\src\\index.js",[],"D:\\Video-Chat\\client\\src\\reportWebVitals.js",[],"D:\\Video-Chat\\client\\src\\App.js",["43"],"import React , {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"font-awesome/css/font-awesome.min.css\"; \r\nconst App = () => {\r\n  \r\n  return (\r\n\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} />\r\n      </Switch> \r\n    </Router>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\Video-Chat\\client\\src\\serviceWorker.js",[],"D:\\Video-Chat\\client\\src\\Home.js",["44"],"import { useEffect } from \"react\";\r\n\r\nimport Video from \"./components/Video/Video\";\r\nimport VideoState from \"./context/VideoState\";\r\n\r\nimport Options from \"./components/options/Options\"; \r\nimport background from './assests/background.jpg'\r\nconst Home = () => {\r\n  useEffect(() => {\r\n    if (!navigator.onLine) alert(\"Connect to internet!\");\r\n  }, [navigator]);\r\n \r\n useEffect(()=>{\r\n    var cookies = document.cookie.split(\";\");\r\n\r\n    for (var i = 0; i < cookies.length; i++) {\r\n        var cookie = cookies[i];\r\n        var eqPos = cookie.indexOf(\"=\");\r\n        var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\r\n        document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n    }\r\n }, [])\r\n  return (\r\n    <VideoState>\r\n      <div className=\"App\" style={{ height: \"100vh\", width: \"100%\",backgroundImage: `url(${background})`,backgroundSize:'cover',backgroundPosition:'center'}}>\r\n        <Video />\r\n        <Options /> \r\n      </div>\r\n    </VideoState>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\Video-Chat\\client\\src\\components\\Video\\Video.js",["45","46","47","48","49","50","51","52","53","54"],"import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport VideoContext from \"../../context/VideoContext\";\r\nimport \"./Video.css\";\r\nimport { Card, Modal, Button, Input, notification, Avatar } from \"antd\"; \r\nimport VideoIcon from \"../../assests/video.svg\";\r\nimport { io } from \"socket.io-client\";\r\nimport VideoOff from \"../../assests/video-off.svg\";\r\n// import Profile from \"../../assests/profile.svg\";\r\nimport Msg_Illus from \"../../assests/msg_illus.svg\";\r\nimport Msg from \"../../assests/msg.svg\";\r\nimport ScreenShare from '../../assests/share_screen.svg'\r\nimport { UserOutlined, MessageOutlined } from \"@ant-design/icons\";\r\n\r\nimport { socket } from \"../../context/VideoState\";\r\n\r\n// const socket = io()\r\nconst { Search } = Input;\r\nconst Video = () => {\r\n  const {\r\n    call,\r\n    callAccepted,\r\n    myVideo,\r\n    userVideo,\r\n    stream,\r\n    name,\r\n    setName,\r\n    callEnded,\r\n    me,\r\n    callUser,\r\n    leaveCall,\r\n    answerCall,\r\n    sendMsg: sendMsgFunc,\r\n    msgRcv,\r\n    chat,\r\n    setChat,\r\n    userName,\r\n    myVdoStatus,\r\n    screenShare,\r\n    fullScreen,\r\n    handleScreenSharing,\r\n    userVdoStatus,\r\n    updateVideo,\r\n    myMicStatus,\r\n    userMicStatus,\r\n    updateMic,\r\n  } = useContext(VideoContext);\r\n\r\n  const [sendMsg, setSendMsg] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  socket.on(\"msgRcv\", ({ name, msg: value, sender }) => {\r\n    let msg = {};\r\n    msg.msg = value;\r\n    msg.type = \"rcv\";\r\n    msg.sender = sender;\r\n    msg.timestamp = Date.now();\r\n    setChat([...chat, msg]);\r\n  });\r\n\r\n  const dummy = useRef();\r\n\r\n  useEffect(() => {\r\n    if (dummy?.current) dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chat]);\r\n\r\n  const showModal = (showVal) => {\r\n    setIsModalVisible(showVal);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    if (value && value.length) sendMsgFunc(value);\r\n    setSendMsg(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (msgRcv.value && !isModalVisible) {\r\n      notification.open({\r\n        message: \"\",\r\n        description: `${msgRcv.sender}: ${msgRcv.value}`,\r\n        icon: <MessageOutlined style={{ color: \"#108ee9\" }} />,\r\n      });\r\n    }\r\n  }, [msgRcv]);\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      {stream ? (\r\n        <div\r\n          style={{ textAlign: \"center\" }}\r\n          className=\"card\"\r\n          id={callAccepted && !callEnded ? \"video1\" : \"video3\"}\r\n        >\r\n          <div className=\"video-avatar-container\">\r\n            <video\r\n              playsInline\r\n              muted\r\n              onClick={fullScreen}\r\n              ref={myVideo}\r\n              autoPlay\r\n              className=\"video-active\"\r\n              style={{\r\n                opacity: `${myVdoStatus ? \"1\" : \"0\"}`,\r\n              }}\r\n            />\r\n\r\n            <Avatar\r\n              style={{\r\n                backgroundColor: \"#116\",\r\n                position: \"absolute\",\r\n                opacity: `${myVdoStatus ? \"-1\" : \"2\"}`,\r\n              }}\r\n              size={98}\r\n              icon={!name && <UserOutlined />}\r\n            >\r\n              {name}\r\n            </Avatar>\r\n          </div>\r\n\r\n          <div className=\"iconsDiv\">\r\n            <div\r\n              className=\"icons\"\r\n              onClick={() => {\r\n                updateMic();\r\n              }}\r\n              tabIndex=\"0\"\r\n            >\r\n              <i\r\n                className={`fa fa-microphone${myMicStatus ? \"\" : \"-slash\"}`}\r\n                style={{ transform: \"scaleX(-1)\" }}\r\n                aria-label={`${myMicStatus ? \"mic on\" : \"mic off\"}`}\r\n                aria-hidden=\"true\"\r\n              ></i>\r\n            </div>\r\n\r\n            {callAccepted && !callEnded && (\r\n              <div\r\n                className=\"icons\"\r\n                onClick={() => {\r\n                  setIsModalVisible(!isModalVisible);\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                <img src={Msg} alt=\"chat icon\" />\r\n              </div>\r\n            )}\r\n            <Modal\r\n              title=\"Chat\"\r\n              footer={null}\r\n              visible={isModalVisible}\r\n              onOk={() => showModal(false)}\r\n              onCancel={() => showModal(false)}\r\n              style={{ maxHeight: \"100px\" }}\r\n            >\r\n              {chat.length ? (\r\n                <div className=\"msg_flex\">\r\n                  {chat.map((msg) => (\r\n                    <div\r\n                      className={msg.type === \"sent\" ? \"msg_sent\" : \"msg_rcv\"}\r\n                    >\r\n                      {msg.msg}\r\n                    </div>\r\n                  ))}\r\n                  <div ref={dummy} id=\"no_border\"></div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"chat_img_div\">\r\n                  <img src={Msg_Illus} alt=\"msg_illus\" className=\"img_illus\" />\r\n                </div>\r\n              )}\r\n              <Search\r\n                placeholder=\"your message\"\r\n                allowClear\r\n                className=\"input_msg\"\r\n                enterButton=\"Send 🚀\"\r\n                onChange={(e) => setSendMsg(e.target.value)}\r\n                value={sendMsg}\r\n                size=\"large\"\r\n                onSearch={onSearch}\r\n              />\r\n            </Modal>\r\n            {callAccepted && !callEnded && (\r\n              <div\r\n                className=\"icons\"\r\n                onClick={() => handleScreenSharing()} \r\n                tabIndex=\"0\"\r\n              >\r\n                <img src={ScreenShare} alt=\"share screen\" />\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"icons\" onClick={() => updateVideo()} tabIndex=\"0\">\r\n              {myVdoStatus ? (\r\n                <img src={VideoIcon} alt=\"video on icon\" />\r\n              ) : (\r\n                <img src={VideoOff} alt=\"video off icon\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"bouncing-loader\">\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      )}\r\n\r\n      {callAccepted && !callEnded && userVideo && (\r\n        <div className=\"card2\" style={{ textAlign: \"center\" }} id=\"video2\"> \r\n          <div className=\"video-avatar-container\">\r\n            <video\r\n              playsInline\r\n              ref={userVideo}             \r\n              onClick={fullScreen}\r\n              autoPlay\r\n              className=\"video-active\"\r\n              style={{\r\n                opacity: `${userVdoStatus ? \"1\" : \"0\"}`,\r\n              }}\r\n            />\r\n\r\n            <Avatar\r\n              style={{\r\n                backgroundColor: \"#116\",\r\n                position: \"absolute\",\r\n                opacity: `${userVdoStatus ? \"-1\" : \"2\"}`,\r\n              }}\r\n              size={98}\r\n              icon={!(userName || call.name) && <UserOutlined />}\r\n            >\r\n              {userName || call.name}\r\n            </Avatar>\r\n            {!userMicStatus && (\r\n              <i\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0\",\r\n                  left: \"0\",\r\n                  padding: \"0.3rem\",\r\n                  backgroundColor: \"#fefefebf\",\r\n                }}\r\n                className=\"fad fa-volume-mute fa-2x\"\r\n                aria-hidden=\"true\"\r\n                aria-label=\"microphone muted\"\r\n              ></i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","D:\\Video-Chat\\client\\src\\components\\options\\Options.js",["55","56"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { Input, Button, Tooltip, Modal, message } from \"antd\";\r\nimport Phone from \"../../assests/phone.gif\";\r\nimport Teams from \"../../assests/teams.mp3\";\r\nimport * as classes from \"./Options.module.css\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport VideoContext from \"../../context/VideoContext\"; \r\nimport { \r\n  CopyOutlined,\r\n  InfoCircleOutlined,\r\n  PhoneOutlined,\r\n} from \"@ant-design/icons\"; \r\n\r\nconst Options = () => {\r\n  const [idToCall, setIdToCall] = useState(\"\");\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const Audio = useRef();\r\n  const {\r\n    call,\r\n    callAccepted, \r\n    callEnded,\r\n    me,\r\n    callUser,\r\n    leaveCall,\r\n    answerCall, \r\n    setOtherUser,\r\n    leaveCall1,\r\n  } = useContext(VideoContext);\r\n\r\n  useEffect(() => {\r\n    if (isModalVisible) {\r\n      Audio?.current?.play();\r\n    } else Audio?.current?.pause();\r\n  }, [isModalVisible]);\r\n\r\n  const showModal = (showVal) => {\r\n    setIsModalVisible(showVal);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    leaveCall1();\r\n    window.location.reload();\r\n  };\r\n  useEffect(() => {\r\n    if (call.isReceivingCall && !callAccepted) {\r\n      setIsModalVisible(true);\r\n      setOtherUser(call.from);\r\n    } else setIsModalVisible(false);\r\n  }, [call.isReceivingCall]);\r\n\r\n  return (\r\n    <div className={classes.options}>\r\n      <div style={{ marginBottom: \"0.5rem\" }}> \r\n        <div className={classes.share_options}>\r\n          <CopyToClipboard text={me}>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<CopyOutlined />}\r\n              className={classes.btn}\r\n              tabIndex=\"0\"\r\n              onClick={() => message.success(\"Code copied successfully!\")}\r\n            >\r\n              Copy code\r\n            </Button>\r\n          </CopyToClipboard> \r\n        </div>\r\n      </div>\r\n      <div style={{ marginBottom: \"0.5rem\" }}> \r\n        <Input\r\n          placeholder=\"Mã cuộc gọi\"\r\n          size=\"large\"\r\n          className={classes.inputgroup}\r\n          value={idToCall}\r\n          onChange={(e) => setIdToCall(e.target.value)}\r\n          style={{ marginRight: \"0.5rem\", marginBottom: \"0.5rem\" }} \r\n          suffix={\r\n            <Tooltip title=\"Nhập mã để thực hiện cuộc gọi\">\r\n              <InfoCircleOutlined style={{ color: \"rgba(0,0,0,.45)\" }} />\r\n            </Tooltip>\r\n          }\r\n        />\r\n\r\n        {callAccepted && !callEnded ? (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={leaveCall}\r\n            className={classes.hang}\r\n            tabIndex=\"0\"\r\n          > \r\n            &nbsp; Giữ máy\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n             callUser(idToCall);\r\n            }}\r\n            className={classes.btn}\r\n            tabIndex=\"0\"\r\n          >\r\n            Gọi\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {call.isReceivingCall && !callAccepted && (\r\n        <>\r\n          <audio src={Teams} loop ref={Audio} />\r\n          <Modal\r\n            title=\"Cuộc gọi đến\"\r\n            visible={isModalVisible}\r\n            onOk={() => showModal(false)}\r\n            onCancel={handleCancel}\r\n            footer={null}\r\n          >\r\n            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n              <h1>\r\n                {call.name} đang gọi bạn\r\n                <img\r\n                  src={Phone}\r\n                  alt=\"phone ringing\"\r\n                  className={classes.phone}\r\n                  style={{ display: \"inline-block\" }}\r\n                />\r\n              </h1>\r\n            </div>\r\n            <div className={classes.btnDiv}>\r\n              \r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.decline} \r\n                onClick={() => {\r\n                  setIsModalVisible(false);\r\n                  Audio.current.pause();\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                Từ chối\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.answer}\r\n                color=\"#29bb89\" \r\n                onClick={() => {\r\n                  answerCall();\r\n                  Audio.current.pause();\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                Trả lời\r\n              </Button>\r\n            </div>\r\n          </Modal>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","D:\\Video-Chat\\client\\src\\context\\VideoState.js",[],["57","58"],"D:\\Video-Chat\\client\\src\\context\\VideoContext.js",[],{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":11,"column":6,"nodeType":"65","endLine":11,"endColumn":17,"suggestions":"66"},{"ruleId":"59","severity":1,"message":"67","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":14},{"ruleId":"59","severity":1,"message":"68","line":4,"column":23,"nodeType":"61","messageId":"62","endLine":4,"endColumn":29},{"ruleId":"59","severity":1,"message":"69","line":6,"column":10,"nodeType":"61","messageId":"62","endLine":6,"endColumn":12},{"ruleId":"59","severity":1,"message":"70","line":26,"column":5,"nodeType":"61","messageId":"62","endLine":26,"endColumn":12},{"ruleId":"59","severity":1,"message":"71","line":28,"column":5,"nodeType":"61","messageId":"62","endLine":28,"endColumn":7},{"ruleId":"59","severity":1,"message":"72","line":29,"column":5,"nodeType":"61","messageId":"62","endLine":29,"endColumn":13},{"ruleId":"59","severity":1,"message":"73","line":30,"column":5,"nodeType":"61","messageId":"62","endLine":30,"endColumn":14},{"ruleId":"59","severity":1,"message":"74","line":31,"column":5,"nodeType":"61","messageId":"62","endLine":31,"endColumn":15},{"ruleId":"59","severity":1,"message":"75","line":38,"column":5,"nodeType":"61","messageId":"62","endLine":38,"endColumn":16},{"ruleId":"63","severity":1,"message":"76","line":82,"column":6,"nodeType":"65","endLine":82,"endColumn":14,"suggestions":"77"},{"ruleId":"59","severity":1,"message":"78","line":11,"column":3,"nodeType":"61","messageId":"62","endLine":11,"endColumn":16},{"ruleId":"63","severity":1,"message":"79","line":51,"column":6,"nodeType":"65","endLine":51,"endColumn":28,"suggestions":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'navigator'. Either exclude it or remove the dependency array. Outer scope values like 'navigator' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["85"],"'Card' is defined but never used.","'Button' is defined but never used.","'io' is defined but never used.","'setName' is assigned a value but never used.","'me' is assigned a value but never used.","'callUser' is assigned a value but never used.","'leaveCall' is assigned a value but never used.","'answerCall' is assigned a value but never used.","'screenShare' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isModalVisible'. Either include it or remove the dependency array.",["86"],"'PhoneOutlined' is defined but never used.","React Hook useEffect has missing dependencies: 'call.from', 'callAccepted', and 'setOtherUser'. Either include them or remove the dependency array.",["87"],"no-native-reassign",["88"],"no-negated-in-lhs",["89"],{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: []",{"range":"96","text":"97"},"Update the dependencies array to be: [isModalVisible, msgRcv]",{"range":"98","text":"99"},"Update the dependencies array to be: [call.from, call.isReceivingCall, callAccepted, setOtherUser]",{"range":"100","text":"101"},[347,358],"[]",[2173,2181],"[isModalVisible, msgRcv]",[1368,1390],"[call.from, call.isReceivingCall, callAccepted, setOtherUser]"]